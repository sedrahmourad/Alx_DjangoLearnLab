"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-f9vn$%b8dz62)owavuzc(f-#p+%k5(g4q%mpjgtv(1^!@&6!jx'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["127.0.0.1", "localhost"]



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf',
    'relationship_app'
]

AUTH_USER_MODEL = 'bookshelf.CustomUser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
     # CSP middleware (if you install django-csp)
    "csp.middleware.CSPMiddleware",
    # ... any other middleware ...
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Use secure cookies so cookies are only sent over HTTPS
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Prevent JavaScript from accessing the session cookie via document.cookie in some browsers
# (Note: HttpOnly is default for session cookie in Django)
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = False  # keep False if you need client-side JS read access; generally OK to stay False

# Browser security headers
SECURE_BROWSER_XSS_FILTER = True  # sets X-XSS-Protection header
SECURE_CONTENT_TYPE_NOSNIFF = True  # sets X-Content-Type-Options: nosniff
X_FRAME_OPTIONS = "DENY"  # prevents clickjacking via frames

# HSTS - enforce HTTPS. Use with care; test before enabling widely.
SECURE_SSL_REDIRECT = True  # redirect HTTP -> HTTPS (set True in production)
SECURE_HSTS_SECONDS = 60  # gradually increase in production (start low for testing)
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = False  # only enable after validation

# Referrer policy (optional)
SECURE_REFERRER_POLICY = "no-referrer-when-downgrade"

# Content Security Policy — option 1: using django-csp (recommended)
# Install via: pip install django-csp

# Minimal CSP policies — tune to your assets and allowed domains
# These are conservative defaults: allow same-origin resources and restrict external scripts/styles
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'",)  # add external script hosts only if necessary
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")  # avoid 'unsafe-inline' if possible; use hashes or nonces
CSP_IMG_SRC = ("'self'", "data:")  # add cdn domains if you use them
CSP_FONT_SRC = ("'self'", "data:")
CSP_CONNECT_SRC = ("'self'",)  # for AJAX/WS; add API domains if used
CSP_FRAME_ANCESTORS = ("'none'",)  # enforce X-FRAME-OPTIONS in CSP as well

# If you cannot use django-csp, see the example below to set header manually in views/middleware.

# Logging security important events (example)
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
    },
    "root": {"handlers": ["console"], "level": "WARNING"},
}

# --- HTTPS & Secure Redirects Settings ---

# Redirect all HTTP traffic to HTTPS
SECURE_SSL_REDIRECT = True  # Must be True in production

# HTTP Strict Transport Security (HSTS) - tell browsers to only use HTTPS
SECURE_HSTS_SECONDS = 31536000  # 1 year (in seconds)
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # apply to all subdomains
SECURE_HSTS_PRELOAD = True  # allows site to be included in browser preload lists

# --- Secure Cookies ---
SESSION_COOKIE_SECURE = True  # session cookies sent only over HTTPS
CSRF_COOKIE_SECURE = True     # CSRF cookies sent only over HTTPS

# --- Security Headers ---
X_FRAME_OPTIONS = "DENY"             # Prevent clickjacking
SECURE_CONTENT_TYPE_NOSNIFF = True   # Prevent MIME sniffing
SECURE_BROWSER_XSS_FILTER = True     # Enable basic XSS protection

DEBUG = os.environ.get("DJANGO_DEBUG", "") != "False"

if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# Tell Django how to detect HTTPS when behind a proxy
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
